
STM32fxx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004d4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800067c  08000684  00010684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800067c  0800067c  00010684  2**0
                  CONTENTS
  4 .ARM          00000000  0800067c  0800067c  00010684  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800067c  08000684  00010684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800067c  0800067c  0001067c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000680  08000680  00010680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010684  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010684  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000877  00000000  00000000  000106b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000250  00000000  00000000  00010f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00011180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000090  00000000  00000000  00011238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001397  00000000  00000000  000112c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c03  00000000  00000000  0001265f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000551a  00000000  00000000  00013262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001877c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000224  00000000  00000000  000187d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000664 	.word	0x08000664

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000664 	.word	0x08000664

080001e8 <delay>:
 */

#include "stm32f407xx.h"

void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	0007a11f 	.word	0x0007a11f

08000214 <main>:

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOLed;

	GPIOLed.pGPIOx = GPIOD;
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <main+0x40>)
 800021c:	607b      	str	r3, [r7, #4]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800021e:	230c      	movs	r3, #12
 8000220:	723b      	strb	r3, [r7, #8]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000222:	2301      	movs	r3, #1
 8000224:	727b      	strb	r3, [r7, #9]
	GPIOLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPD_HS;
 8000226:	2302      	movs	r3, #2
 8000228:	72bb      	strb	r3, [r7, #10]
	GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800022a:	2300      	movs	r3, #0
 800022c:	733b      	strb	r3, [r7, #12]
	GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800022e:	2300      	movs	r3, #0
 8000230:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOD, ENABLE);
 8000232:	2101      	movs	r1, #1
 8000234:	4807      	ldr	r0, [pc, #28]	; (8000254 <main+0x40>)
 8000236:	f000 f839 	bl	80002ac <GPIO_PeriClockControl>
	GPIO_Init(&GPIOLed);
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	4618      	mov	r0, r3
 800023e:	f000 f91b 	bl	8000478 <GPIO_Init>

	while(1)
	{
		GPIO_ToggleOutputPin(GPIOLed.pGPIOx, GPIOLed.GPIO_PinConfig.GPIO_PinNumber);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	7a3a      	ldrb	r2, [r7, #8]
 8000246:	4611      	mov	r1, r2
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f9d1 	bl	80005f0 <GPIO_ToggleOutputPin>
		delay();
 800024e:	f7ff ffcb 	bl	80001e8 <delay>
		GPIO_ToggleOutputPin(GPIOLed.pGPIOx, GPIOLed.GPIO_PinConfig.GPIO_PinNumber);
 8000252:	e7f6      	b.n	8000242 <main+0x2e>
 8000254:	40020c00 	.word	0x40020c00

08000258 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000258:	480d      	ldr	r0, [pc, #52]	; (8000290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800025c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000260:	480c      	ldr	r0, [pc, #48]	; (8000294 <LoopForever+0x6>)
  ldr r1, =_edata
 8000262:	490d      	ldr	r1, [pc, #52]	; (8000298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000264:	4a0d      	ldr	r2, [pc, #52]	; (800029c <LoopForever+0xe>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000268:	e002      	b.n	8000270 <LoopCopyDataInit>

0800026a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800026c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026e:	3304      	adds	r3, #4

08000270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000274:	d3f9      	bcc.n	800026a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000276:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000278:	4c0a      	ldr	r4, [pc, #40]	; (80002a4 <LoopForever+0x16>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800027c:	e001      	b.n	8000282 <LoopFillZerobss>

0800027e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000280:	3204      	adds	r2, #4

08000282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000284:	d3fb      	bcc.n	800027e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000286:	f000 f9c9 	bl	800061c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028a:	f7ff ffc3 	bl	8000214 <main>

0800028e <LoopForever>:

LoopForever:
    b LoopForever
 800028e:	e7fe      	b.n	800028e <LoopForever>
  ldr   r0, =_estack
 8000290:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000298:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800029c:	08000684 	.word	0x08000684
  ldr r2, =_sbss
 80002a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a4:	2000001c 	.word	0x2000001c

080002a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a8:	e7fe      	b.n	80002a8 <ADC_IRQHandler>
	...

080002ac <GPIO_PeriClockControl>:
 * @param pGPIOx Pointer to the GPIO Port base address
 * @param EnorDi Enable or Disable
 * @return No value is returned
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	460b      	mov	r3, r1
 80002b6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002b8:	78fb      	ldrb	r3, [r7, #3]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d162      	bne.n	8000384 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a64      	ldr	r2, [pc, #400]	; (8000454 <GPIO_PeriClockControl+0x1a8>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d106      	bne.n	80002d4 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80002c6:	4b64      	ldr	r3, [pc, #400]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 80002c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ca:	4a63      	ldr	r2, [pc, #396]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if(pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
 80002d2:	e0b9      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOA)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a5f      	ldr	r2, [pc, #380]	; (8000454 <GPIO_PeriClockControl+0x1a8>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d106      	bne.n	80002ea <GPIO_PeriClockControl+0x3e>
			GPIOA_PCLK_EN();
 80002dc:	4b5e      	ldr	r3, [pc, #376]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 80002de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e0:	4a5d      	ldr	r2, [pc, #372]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e8:	e0ae      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a5b      	ldr	r2, [pc, #364]	; (800045c <GPIO_PeriClockControl+0x1b0>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d106      	bne.n	8000300 <GPIO_PeriClockControl+0x54>
			GPIOB_PCLK_EN();
 80002f2:	4b59      	ldr	r3, [pc, #356]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f6:	4a58      	ldr	r2, [pc, #352]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 80002f8:	f043 0302 	orr.w	r3, r3, #2
 80002fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fe:	e0a3      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a57      	ldr	r2, [pc, #348]	; (8000460 <GPIO_PeriClockControl+0x1b4>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d106      	bne.n	8000316 <GPIO_PeriClockControl+0x6a>
			GPIOC_PCLK_EN();
 8000308:	4b53      	ldr	r3, [pc, #332]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 800030a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030c:	4a52      	ldr	r2, [pc, #328]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000314:	e098      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a52      	ldr	r2, [pc, #328]	; (8000464 <GPIO_PeriClockControl+0x1b8>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d106      	bne.n	800032c <GPIO_PeriClockControl+0x80>
			GPIOD_PCLK_EN();
 800031e:	4b4e      	ldr	r3, [pc, #312]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000322:	4a4d      	ldr	r2, [pc, #308]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 8000324:	f043 0308 	orr.w	r3, r3, #8
 8000328:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032a:	e08d      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a4e      	ldr	r2, [pc, #312]	; (8000468 <GPIO_PeriClockControl+0x1bc>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d106      	bne.n	8000342 <GPIO_PeriClockControl+0x96>
			GPIOE_PCLK_EN();
 8000334:	4b48      	ldr	r3, [pc, #288]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000338:	4a47      	ldr	r2, [pc, #284]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 800033a:	f043 0310 	orr.w	r3, r3, #16
 800033e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000340:	e082      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a49      	ldr	r2, [pc, #292]	; (800046c <GPIO_PeriClockControl+0x1c0>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_PeriClockControl+0xac>
			GPIOF_PCLK_EN();
 800034a:	4b43      	ldr	r3, [pc, #268]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	4a42      	ldr	r2, [pc, #264]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 8000350:	f043 0320 	orr.w	r3, r3, #32
 8000354:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000356:	e077      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a45      	ldr	r2, [pc, #276]	; (8000470 <GPIO_PeriClockControl+0x1c4>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000360:	4b3d      	ldr	r3, [pc, #244]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a3c      	ldr	r2, [pc, #240]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 8000366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036c:	e06c      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a40      	ldr	r2, [pc, #256]	; (8000474 <GPIO_PeriClockControl+0x1c8>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d168      	bne.n	8000448 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000376:	4b38      	ldr	r3, [pc, #224]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037a:	4a37      	ldr	r2, [pc, #220]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 800037c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000380:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000382:	e061      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a33      	ldr	r2, [pc, #204]	; (8000454 <GPIO_PeriClockControl+0x1a8>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 800038c:	4b32      	ldr	r3, [pc, #200]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a31      	ldr	r2, [pc, #196]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 8000392:	f023 0301 	bic.w	r3, r3, #1
 8000396:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000398:	e056      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOA)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a2d      	ldr	r2, [pc, #180]	; (8000454 <GPIO_PeriClockControl+0x1a8>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PeriClockControl+0x104>
			GPIOA_PCLK_DI();
 80003a2:	4b2d      	ldr	r3, [pc, #180]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a6:	4a2c      	ldr	r2, [pc, #176]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 80003a8:	f023 0301 	bic.w	r3, r3, #1
 80003ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ae:	e04b      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a2a      	ldr	r2, [pc, #168]	; (800045c <GPIO_PeriClockControl+0x1b0>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <GPIO_PeriClockControl+0x11a>
			GPIOB_PCLK_DI();
 80003b8:	4b27      	ldr	r3, [pc, #156]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003bc:	4a26      	ldr	r2, [pc, #152]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 80003be:	f023 0302 	bic.w	r3, r3, #2
 80003c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c4:	e040      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a25      	ldr	r2, [pc, #148]	; (8000460 <GPIO_PeriClockControl+0x1b4>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PeriClockControl+0x130>
			GPIOC_PCLK_DI();
 80003ce:	4b22      	ldr	r3, [pc, #136]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d2:	4a21      	ldr	r2, [pc, #132]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 80003d4:	f023 0304 	bic.w	r3, r3, #4
 80003d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003da:	e035      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a21      	ldr	r2, [pc, #132]	; (8000464 <GPIO_PeriClockControl+0x1b8>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PeriClockControl+0x146>
			GPIOD_PCLK_DI();
 80003e4:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e8:	4a1b      	ldr	r2, [pc, #108]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 80003ea:	f023 0308 	bic.w	r3, r3, #8
 80003ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f0:	e02a      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a1c      	ldr	r2, [pc, #112]	; (8000468 <GPIO_PeriClockControl+0x1bc>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PeriClockControl+0x15c>
			GPIOE_PCLK_DI();
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fe:	4a16      	ldr	r2, [pc, #88]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 8000400:	f023 0310 	bic.w	r3, r3, #16
 8000404:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000406:	e01f      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a18      	ldr	r2, [pc, #96]	; (800046c <GPIO_PeriClockControl+0x1c0>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_PeriClockControl+0x172>
			GPIOF_PCLK_DI();
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000414:	4a10      	ldr	r2, [pc, #64]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 8000416:	f023 0320 	bic.w	r3, r3, #32
 800041a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041c:	e014      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a13      	ldr	r2, [pc, #76]	; (8000470 <GPIO_PeriClockControl+0x1c4>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d106      	bne.n	8000434 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 800042c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000430:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000432:	e009      	b.n	8000448 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a0f      	ldr	r2, [pc, #60]	; (8000474 <GPIO_PeriClockControl+0x1c8>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d105      	bne.n	8000448 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000440:	4a05      	ldr	r2, [pc, #20]	; (8000458 <GPIO_PeriClockControl+0x1ac>)
 8000442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000446:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	40020000 	.word	0x40020000
 8000458:	40023800 	.word	0x40023800
 800045c:	40020400 	.word	0x40020400
 8000460:	40020800 	.word	0x40020800
 8000464:	40020c00 	.word	0x40020c00
 8000468:	40021000 	.word	0x40021000
 800046c:	40021400 	.word	0x40021400
 8000470:	40021c00 	.word	0x40021c00
 8000474:	40022000 	.word	0x40022000

08000478 <GPIO_Init>:
 *
 * @param pGPIOHandle Pointer to the structure containing the GPIO Pin configuration information.
 * @return No value is returned
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000478:	b480      	push	{r7}
 800047a:	b087      	sub	sp, #28
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	uint32_t buf = 0; // Create a temporary register initialized to all 0s;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	795b      	ldrb	r3, [r3, #5]
 8000488:	2b03      	cmp	r3, #3
 800048a:	d81e      	bhi.n	80004ca <GPIO_Init+0x52>
		 * the Pin Mode to set from the provided handle, then left
		 * shift INTO the buffer. Our position is 2 (width of
		 * the allotment) times our pin number. The width is defined by ST
		 * and can be verified in section 8.4.1 of the Reference Manual.
		 */
		buf = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	795b      	ldrb	r3, [r3, #5]
 8000490:	461a      	mov	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791b      	ldrb	r3, [r3, #4]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	617b      	str	r3, [r7, #20]
		/*
		 * Write the inverse of 0x3 (binary 11) to the the Pin Position's Mode Register
		 * This is the proper way to ensure a 2 bit wide field such as Mode is
		 * set to 0 since the logical inverse of 1 = 0
		 */
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	791b      	ldrb	r3, [r3, #4]
 80004a8:	4619      	mov	r1, r3
 80004aa:	2303      	movs	r3, #3
 80004ac:	408b      	lsls	r3, r1
 80004ae:	43db      	mvns	r3, r3
 80004b0:	4619      	mov	r1, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	400a      	ands	r2, r1
 80004b8:	601a      	str	r2, [r3, #0]

		/*
		 * Set the temporary buffer to the MCU's memory using bitwise OR
		 * Using a bitwise OR will only change the bits assigned in the temporary buffer
		 */
		pGPIOHandle->pGPIOx->MODER |= buf;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	6819      	ldr	r1, [r3, #0]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	697a      	ldr	r2, [r7, #20]
 80004c6:	430a      	orrs	r2, r1
 80004c8:	601a      	str	r2, [r3, #0]
	}

	/*
	 * Re-Initialize the temporary buffer
	 */
	buf = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]

	// The GPIOx_OSPEEDR register is also 2 bits wide so we perform the same shift as above
	buf = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	799b      	ldrb	r3, [r3, #6]
 80004d2:	461a      	mov	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	791b      	ldrb	r3, [r3, #4]
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	fa02 f303 	lsl.w	r3, r2, r3
 80004de:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	689a      	ldr	r2, [r3, #8]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	4619      	mov	r1, r3
 80004ec:	2303      	movs	r3, #3
 80004ee:	408b      	lsls	r3, r1
 80004f0:	43db      	mvns	r3, r3
 80004f2:	4619      	mov	r1, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	400a      	ands	r2, r1
 80004fa:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= buf;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6899      	ldr	r1, [r3, #8]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	697a      	ldr	r2, [r7, #20]
 8000508:	430a      	orrs	r2, r1
 800050a:	609a      	str	r2, [r3, #8]

	buf = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]

	// The GPIOx_PUPDR register is also 2 bits wide so we perform the same shift as above
	buf = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (  2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	79db      	ldrb	r3, [r3, #7]
 8000514:	461a      	mov	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	fa02 f303 	lsl.w	r3, r2, r3
 8000520:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR |= buf;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	68d9      	ldr	r1, [r3, #12]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	430a      	orrs	r2, r1
 8000530:	60da      	str	r2, [r3, #12]

	buf = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]

	// GPIOx_OTYPER is only a single bit wide so we do not need to multiply by 2
	buf = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	7a1b      	ldrb	r3, [r3, #8]
 800053a:	461a      	mov	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	791b      	ldrb	r3, [r3, #4]
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	685a      	ldr	r2, [r3, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	4619      	mov	r1, r3
 8000552:	2301      	movs	r3, #1
 8000554:	408b      	lsls	r3, r1
 8000556:	43db      	mvns	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	400a      	ands	r2, r1
 8000560:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= buf;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	6859      	ldr	r1, [r3, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	430a      	orrs	r2, r1
 8000570:	605a      	str	r2, [r3, #4]

	buf = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	795b      	ldrb	r3, [r3, #5]
 800057a:	2b02      	cmp	r3, #2
 800057c:	d132      	bne.n	80005e4 <GPIO_Init+0x16c>
	{
		uint32_t register_pos, pin_offset;

		// This is integer math to determine if we are AF High or Low Register
		register_pos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	791b      	ldrb	r3, [r3, #4]
 8000582:	08db      	lsrs	r3, r3, #3
 8000584:	b2db      	uxtb	r3, r3
 8000586:	613b      	str	r3, [r7, #16]
		// Now we use a modulus operator to determine which pin position we start at
		pin_offset = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	f003 0307 	and.w	r3, r3, #7
 8000590:	60fb      	str	r3, [r7, #12]

		/*
		 * To Clear 4-bit wide we need to write the binary inverse of 1111 which converts to
		 * 0xF starting at our calculated pin_offset
		 */
		pGPIOHandle->pGPIOx->AFR[register_pos] &= ~(0xF << ( 4 * pin_offset ));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	693a      	ldr	r2, [r7, #16]
 8000598:	3208      	adds	r2, #8
 800059a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	210f      	movs	r1, #15
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4011      	ands	r1, r2
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	3208      	adds	r2, #8
 80005b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// The GPIO Alternate Registers are 4 bits wide since we have up to 16 alternate functions
		// So adjust our left shift to allow for 4 bit values starting at our pin offset
		pGPIOHandle->pGPIOx->AFR[register_pos] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (  4 * pin_offset ) );
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	693a      	ldr	r2, [r7, #16]
 80005c0:	3208      	adds	r2, #8
 80005c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	7a5b      	ldrb	r3, [r3, #9]
 80005ca:	4619      	mov	r1, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	fa01 f303 	lsl.w	r3, r1, r3
 80005d4:	4619      	mov	r1, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4311      	orrs	r1, r2
 80005dc:	693a      	ldr	r2, [r7, #16]
 80005de:	3208      	adds	r2, #8
 80005e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80005e4:	bf00      	nop
 80005e6:	371c      	adds	r7, #28
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <GPIO_ToggleOutputPin>:
 * @param pGPIOx Pointer to the GPIO Port base address
 * @param PinNumber The pin number you wish to toggle
 * @return No value is returned
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
	/*
	 * To Toggle we simply perform a bitwise
	 * XOR operation on the provided Pin
	 */
	pGPIOx->ODR ^= ( 1 << PinNumber );
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	78fa      	ldrb	r2, [r7, #3]
 8000602:	2101      	movs	r1, #1
 8000604:	fa01 f202 	lsl.w	r2, r1, r2
 8000608:	405a      	eors	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	615a      	str	r2, [r3, #20]
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <__libc_init_array>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	4d0d      	ldr	r5, [pc, #52]	; (8000654 <__libc_init_array+0x38>)
 8000620:	4c0d      	ldr	r4, [pc, #52]	; (8000658 <__libc_init_array+0x3c>)
 8000622:	1b64      	subs	r4, r4, r5
 8000624:	10a4      	asrs	r4, r4, #2
 8000626:	2600      	movs	r6, #0
 8000628:	42a6      	cmp	r6, r4
 800062a:	d109      	bne.n	8000640 <__libc_init_array+0x24>
 800062c:	4d0b      	ldr	r5, [pc, #44]	; (800065c <__libc_init_array+0x40>)
 800062e:	4c0c      	ldr	r4, [pc, #48]	; (8000660 <__libc_init_array+0x44>)
 8000630:	f000 f818 	bl	8000664 <_init>
 8000634:	1b64      	subs	r4, r4, r5
 8000636:	10a4      	asrs	r4, r4, #2
 8000638:	2600      	movs	r6, #0
 800063a:	42a6      	cmp	r6, r4
 800063c:	d105      	bne.n	800064a <__libc_init_array+0x2e>
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f855 3b04 	ldr.w	r3, [r5], #4
 8000644:	4798      	blx	r3
 8000646:	3601      	adds	r6, #1
 8000648:	e7ee      	b.n	8000628 <__libc_init_array+0xc>
 800064a:	f855 3b04 	ldr.w	r3, [r5], #4
 800064e:	4798      	blx	r3
 8000650:	3601      	adds	r6, #1
 8000652:	e7f2      	b.n	800063a <__libc_init_array+0x1e>
 8000654:	0800067c 	.word	0x0800067c
 8000658:	0800067c 	.word	0x0800067c
 800065c:	0800067c 	.word	0x0800067c
 8000660:	08000680 	.word	0x08000680

08000664 <_init>:
 8000664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000666:	bf00      	nop
 8000668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800066a:	bc08      	pop	{r3}
 800066c:	469e      	mov	lr, r3
 800066e:	4770      	bx	lr

08000670 <_fini>:
 8000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000672:	bf00      	nop
 8000674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000676:	bc08      	pop	{r3}
 8000678:	469e      	mov	lr, r3
 800067a:	4770      	bx	lr
